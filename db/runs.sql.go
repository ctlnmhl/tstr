// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: runs.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const assignRun = `-- name: AssignRun :one
UPDATE runs
SET runner_id = $1::uuid
FROM test_run_configs
WHERE runs.id = (
  SELECT id
  FROM runs AS selected_runs
  WHERE selected_runs.test_id = ANY($2::uuid[]) AND selected_runs.runner_id IS NULL
  ORDER BY selected_runs.scheduled_at ASC
  LIMIT 1
) AND runs.test_run_config_id = test_run_configs.id
RETURNING runs.id, runs.test_id, runs.test_run_config_id, runs.runner_id, runs.result, runs.logs, runs.scheduled_at, runs.started_at, runs.finished_at, test_run_configs.container_image, test_run_configs.command, test_run_configs.args, test_run_configs.env, test_run_configs.created_at AS test_run_config_created_at
`

type AssignRunParams struct {
	RunnerID uuid.UUID
	TestIds  []uuid.UUID
}

type AssignRunRow struct {
	ID                     uuid.UUID
	TestID                 uuid.UUID
	TestRunConfigID        uuid.UUID
	RunnerID               uuid.NullUUID
	Result                 RunResult
	Logs                   pgtype.JSONB
	ScheduledAt            sql.NullTime
	StartedAt              sql.NullTime
	FinishedAt             sql.NullTime
	ContainerImage         string
	Command                sql.NullString
	Args                   []string
	Env                    pgtype.JSONB
	TestRunConfigCreatedAt sql.NullTime
}

func (q *Queries) AssignRun(ctx context.Context, arg AssignRunParams) (AssignRunRow, error) {
	row := q.db.QueryRow(ctx, assignRun, arg.RunnerID, arg.TestIds)
	var i AssignRunRow
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.TestRunConfigID,
		&i.RunnerID,
		&i.Result,
		&i.Logs,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.FinishedAt,
		&i.ContainerImage,
		&i.Command,
		&i.Args,
		&i.Env,
		&i.TestRunConfigCreatedAt,
	)
	return i, err
}

const getRun = `-- name: GetRun :one
SELECT runs.id, runs.test_id, runs.test_run_config_id, runs.runner_id, runs.result, runs.logs, runs.scheduled_at, runs.started_at, runs.finished_at, test_run_configs.container_image, test_run_configs.command, test_run_configs.args, test_run_configs.env, test_run_configs.created_at
FROM runs
JOIN test_run_configs
ON runs.test_run_config_id = test_run_configs.id
WHERE runs.id = $1
`

type GetRunRow struct {
	ID              uuid.UUID
	TestID          uuid.UUID
	TestRunConfigID uuid.UUID
	RunnerID        uuid.NullUUID
	Result          RunResult
	Logs            pgtype.JSONB
	ScheduledAt     sql.NullTime
	StartedAt       sql.NullTime
	FinishedAt      sql.NullTime
	ContainerImage  string
	Command         sql.NullString
	Args            []string
	Env             pgtype.JSONB
	CreatedAt       sql.NullTime
}

func (q *Queries) GetRun(ctx context.Context, id uuid.UUID) (GetRunRow, error) {
	row := q.db.QueryRow(ctx, getRun, id)
	var i GetRunRow
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.TestRunConfigID,
		&i.RunnerID,
		&i.Result,
		&i.Logs,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.FinishedAt,
		&i.ContainerImage,
		&i.Command,
		&i.Args,
		&i.Env,
		&i.CreatedAt,
	)
	return i, err
}

const listRuns = `-- name: ListRuns :many
SELECT runs.id, runs.test_id, runs.test_run_config_id, runs.runner_id, runs.result, runs.logs, runs.scheduled_at, runs.started_at, runs.finished_at, test_run_configs.container_image, test_run_configs.command, test_run_configs.args, test_run_configs.env, test_run_configs.created_at
FROM runs
JOIN test_run_configs
ON runs.test_run_config_id = test_run_configs.id
WHERE
  ($1::uuid[] IS NULL OR runs.test_id = ANY ($1::uuid[])) AND
  ($2::uuid[] IS NULL OR runs.test_id = ANY (
      SELECT tests.id
      FROM test_suites
      JOIN tests
      ON tests.labels @> test_suites.labels
      WHERE test_suites.id = ANY ($2::uuid[])
    )) AND
  ($3::uuid[] IS NULL OR runner_id = ANY ($3::uuid[])) AND
  ($4::run_result[] IS NULL OR result = ANY ($4::run_result[])) AND
  ($5::timestamptz IS NULL OR scheduled_at < $5::timestamptz) AND
  ($6::timestamptz IS NULL OR scheduled_at > $6::timestamptz) AND
  ($7::timestamptz IS NULL OR started_at < $7::timestamptz) AND
  ($8::timestamptz IS NULL OR started_at > $8::timestamptz) AND
  ($9::timestamptz IS NULL OR finished_at < $9::timestamptz) AND
  ($10::timestamptz IS NULL OR finished_at > $10::timestamptz)
`

type ListRunsParams struct {
	TestIds         []uuid.UUID
	TestSuiteIds    []uuid.UUID
	RunnerIds       []uuid.UUID
	Results         []RunResult
	ScheduledBefore sql.NullTime
	ScheduledAfter  sql.NullTime
	StartedBefore   sql.NullTime
	StartedAfter    sql.NullTime
	FinishedBefore  sql.NullTime
	FinishedAfter   sql.NullTime
}

type ListRunsRow struct {
	ID              uuid.UUID
	TestID          uuid.UUID
	TestRunConfigID uuid.UUID
	RunnerID        uuid.NullUUID
	Result          RunResult
	Logs            pgtype.JSONB
	ScheduledAt     sql.NullTime
	StartedAt       sql.NullTime
	FinishedAt      sql.NullTime
	ContainerImage  string
	Command         sql.NullString
	Args            []string
	Env             pgtype.JSONB
	CreatedAt       sql.NullTime
}

func (q *Queries) ListRuns(ctx context.Context, arg ListRunsParams) ([]ListRunsRow, error) {
	rows, err := q.db.Query(ctx, listRuns,
		arg.TestIds,
		arg.TestSuiteIds,
		arg.RunnerIds,
		arg.Results,
		arg.ScheduledBefore,
		arg.ScheduledAfter,
		arg.StartedBefore,
		arg.StartedAfter,
		arg.FinishedBefore,
		arg.FinishedAfter,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRunsRow
	for rows.Next() {
		var i ListRunsRow
		if err := rows.Scan(
			&i.ID,
			&i.TestID,
			&i.TestRunConfigID,
			&i.RunnerID,
			&i.Result,
			&i.Logs,
			&i.ScheduledAt,
			&i.StartedAt,
			&i.FinishedAt,
			&i.ContainerImage,
			&i.Command,
			&i.Args,
			&i.Env,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const scheduleRun = `-- name: ScheduleRun :one
WITH scheduled_run AS (
  INSERT INTO runs (test_id, test_run_config_id)
  VALUES ($1::uuid, $2::uuid)
  RETURNING id, test_id, test_run_config_id, runner_id, result, logs, scheduled_at, started_at, finished_at
)
SELECT scheduled_run.id, scheduled_run.test_id, scheduled_run.test_run_config_id, scheduled_run.runner_id, scheduled_run.result, scheduled_run.logs, scheduled_run.scheduled_at, scheduled_run.started_at, scheduled_run.finished_at, test_run_configs.container_image, test_run_configs.command, test_run_configs.args, test_run_configs.env, test_run_configs.created_at AS test_run_config_created_at
FROM scheduled_run
JOIN test_run_configs
ON scheduled_run.test_run_config_id = test_run_configs.id
`

type ScheduleRunParams struct {
	TestID          uuid.UUID
	TestRunConfigID uuid.UUID
}

type ScheduleRunRow struct {
	ID                     uuid.UUID
	TestID                 uuid.UUID
	TestRunConfigID        uuid.UUID
	RunnerID               uuid.NullUUID
	Result                 RunResult
	Logs                   pgtype.JSONB
	ScheduledAt            sql.NullTime
	StartedAt              sql.NullTime
	FinishedAt             sql.NullTime
	ContainerImage         string
	Command                sql.NullString
	Args                   []string
	Env                    pgtype.JSONB
	TestRunConfigCreatedAt sql.NullTime
}

func (q *Queries) ScheduleRun(ctx context.Context, arg ScheduleRunParams) (ScheduleRunRow, error) {
	row := q.db.QueryRow(ctx, scheduleRun, arg.TestID, arg.TestRunConfigID)
	var i ScheduleRunRow
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.TestRunConfigID,
		&i.RunnerID,
		&i.Result,
		&i.Logs,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.FinishedAt,
		&i.ContainerImage,
		&i.Command,
		&i.Args,
		&i.Env,
		&i.TestRunConfigCreatedAt,
	)
	return i, err
}

const updateRun = `-- name: UpdateRun :exec
UPDATE runs
SET
  result = $1,
  logs = $2,
  started_at = $3::timestamptz,
  finished_at = $4::timestamptz
WHERE id = $5::uuid
`

type UpdateRunParams struct {
	Result     RunResult
	Logs       pgtype.JSONB
	StartedAt  time.Time
	FinishedAt time.Time
	ID         uuid.UUID
}

func (q *Queries) UpdateRun(ctx context.Context, arg UpdateRunParams) error {
	_, err := q.db.Exec(ctx, updateRun,
		arg.Result,
		arg.Logs,
		arg.StartedAt,
		arg.FinishedAt,
		arg.ID,
	)
	return err
}
