// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: test_suites.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const archiveTestSuite = `-- name: ArchiveTestSuite :exec
UPDATE test_suites
SET archived_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) ArchiveTestSuite(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, archiveTestSuite, id)
	return err
}

const defineTestSuite = `-- name: DefineTestSuite :one
INSERT INTO test_suites (name, labels)
VALUES ($1, $2)
RETURNING id, name, labels, created_at, updated_at, archived_at
`

type DefineTestSuiteParams struct {
	Name   string
	Labels pgtype.JSONB
}

func (q *Queries) DefineTestSuite(ctx context.Context, arg DefineTestSuiteParams) (TestSuite, error) {
	row := q.db.QueryRow(ctx, defineTestSuite, arg.Name, arg.Labels)
	var i TestSuite
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Labels,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ArchivedAt,
	)
	return i, err
}

const getTestSuite = `-- name: GetTestSuite :one
SELECT id, name, labels, created_at, updated_at, archived_at
FROM test_suites
WHERE id = $1::uuid
`

func (q *Queries) GetTestSuite(ctx context.Context, id uuid.UUID) (TestSuite, error) {
	row := q.db.QueryRow(ctx, getTestSuite, id)
	var i TestSuite
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Labels,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ArchivedAt,
	)
	return i, err
}

const updateTestSuite = `-- name: UpdateTestSuite :exec
UPDATE test_suites
SET
  name = $1::varchar,
  labels = $2,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $3
`

type UpdateTestSuiteParams struct {
	Name   string
	Labels pgtype.JSONB
	ID     uuid.UUID
}

func (q *Queries) UpdateTestSuite(ctx context.Context, arg UpdateTestSuiteParams) error {
	_, err := q.db.Exec(ctx, updateTestSuite, arg.Name, arg.Labels, arg.ID)
	return err
}

const listTestSuites = `-- name: listTestSuites :many
SELECT id, name, labels, created_at, updated_at, archived_at
FROM test_suites
WHERE labels @> $1
ORDER BY name ASC
`

func (q *Queries) listTestSuites(ctx context.Context, labels pgtype.JSONB) ([]TestSuite, error) {
	rows, err := q.db.Query(ctx, listTestSuites, labels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TestSuite
	for rows.Next() {
		var i TestSuite
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Labels,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
