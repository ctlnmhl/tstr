// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: control/v1/control.proto

package controlv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "github.com/nanzhong/tstr/api/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.Run_Result(0)
)

// Validate checks the field values on RegisterTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterTestRequestMultiError, or nil if none found.
func (m *RegisterTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		err := RegisterTestRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Labels

	if m.GetRunConfig() == nil {
		err := RegisterTestRequestValidationError{
			field:  "RunConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRunConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterTestRequestValidationError{
					field:  "RunConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterTestRequestValidationError{
					field:  "RunConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterTestRequestValidationError{
				field:  "RunConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CronSchedule

	if all {
		switch v := interface{}(m.GetMatrix()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterTestRequestValidationError{
					field:  "Matrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterTestRequestValidationError{
					field:  "Matrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatrix()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterTestRequestValidationError{
				field:  "Matrix",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterTestRequestMultiError(errors)
	}

	return nil
}

// RegisterTestRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterTestRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterTestRequestMultiError) AllErrors() []error { return m }

// RegisterTestRequestValidationError is the validation error returned by
// RegisterTestRequest.Validate if the designated constraints aren't met.
type RegisterTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterTestRequestValidationError) ErrorName() string {
	return "RegisterTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterTestRequestValidationError{}

// Validate checks the field values on RegisterTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterTestResponseMultiError, or nil if none found.
func (m *RegisterTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterTestResponseValidationError{
					field:  "Test",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterTestResponseValidationError{
					field:  "Test",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterTestResponseValidationError{
				field:  "Test",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterTestResponseMultiError(errors)
	}

	return nil
}

// RegisterTestResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterTestResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterTestResponseMultiError) AllErrors() []error { return m }

// RegisterTestResponseValidationError is the validation error returned by
// RegisterTestResponse.Validate if the designated constraints aren't met.
type RegisterTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterTestResponseValidationError) ErrorName() string {
	return "RegisterTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterTestResponseValidationError{}

// Validate checks the field values on UpdateTestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestRequestMultiError, or nil if none found.
func (m *UpdateTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetRunConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "RunConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "RunConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestRequestValidationError{
				field:  "RunConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for CronSchedule

	if all {
		switch v := interface{}(m.GetMatrix()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "Matrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "Matrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatrix()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestRequestValidationError{
				field:  "Matrix",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTestRequestMultiError(errors)
	}

	return nil
}

// UpdateTestRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTestRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestRequestMultiError) AllErrors() []error { return m }

// UpdateTestRequestValidationError is the validation error returned by
// UpdateTestRequest.Validate if the designated constraints aren't met.
type UpdateTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestRequestValidationError) ErrorName() string {
	return "UpdateTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestRequestValidationError{}

// Validate checks the field values on UpdateTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestResponseMultiError, or nil if none found.
func (m *UpdateTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTestResponseMultiError(errors)
	}

	return nil
}

// UpdateTestResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateTestResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestResponseMultiError) AllErrors() []error { return m }

// UpdateTestResponseValidationError is the validation error returned by
// UpdateTestResponse.Validate if the designated constraints aren't met.
type UpdateTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestResponseValidationError) ErrorName() string {
	return "UpdateTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestResponseValidationError{}

// Validate checks the field values on GetTestRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTestRequestMultiError,
// or nil if none found.
func (m *GetTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTestRequestMultiError(errors)
	}

	return nil
}

// GetTestRequestMultiError is an error wrapping multiple validation errors
// returned by GetTestRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestRequestMultiError) AllErrors() []error { return m }

// GetTestRequestValidationError is the validation error returned by
// GetTestRequest.Validate if the designated constraints aren't met.
type GetTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestRequestValidationError) ErrorName() string { return "GetTestRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestRequestValidationError{}

// Validate checks the field values on GetTestResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestResponseMultiError, or nil if none found.
func (m *GetTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTestResponseValidationError{
					field:  "Test",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTestResponseValidationError{
					field:  "Test",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTestResponseValidationError{
				field:  "Test",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTestResponseMultiError(errors)
	}

	return nil
}

// GetTestResponseMultiError is an error wrapping multiple validation errors
// returned by GetTestResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestResponseMultiError) AllErrors() []error { return m }

// GetTestResponseValidationError is the validation error returned by
// GetTestResponse.Validate if the designated constraints aren't met.
type GetTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestResponseValidationError) ErrorName() string { return "GetTestResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestResponseValidationError{}

// Validate checks the field values on ListTestsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTestsRequestMultiError, or nil if none found.
func (m *ListTestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTestsRequestMultiError(errors)
	}

	return nil
}

// ListTestsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTestsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTestsRequestMultiError) AllErrors() []error { return m }

// ListTestsRequestValidationError is the validation error returned by
// ListTestsRequest.Validate if the designated constraints aren't met.
type ListTestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestsRequestValidationError) ErrorName() string { return "ListTestsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestsRequestValidationError{}

// Validate checks the field values on ListTestsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTestsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTestsResponseMultiError, or nil if none found.
func (m *ListTestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTestsResponseValidationError{
						field:  fmt.Sprintf("Tests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTestsResponseValidationError{
						field:  fmt.Sprintf("Tests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTestsResponseValidationError{
					field:  fmt.Sprintf("Tests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTestsResponseMultiError(errors)
	}

	return nil
}

// ListTestsResponseMultiError is an error wrapping multiple validation errors
// returned by ListTestsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTestsResponseMultiError) AllErrors() []error { return m }

// ListTestsResponseValidationError is the validation error returned by
// ListTestsResponse.Validate if the designated constraints aren't met.
type ListTestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestsResponseValidationError) ErrorName() string {
	return "ListTestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestsResponseValidationError{}

// Validate checks the field values on DeleteTestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestRequestMultiError, or nil if none found.
func (m *DeleteTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTestRequestMultiError(errors)
	}

	return nil
}

// DeleteTestRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTestRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestRequestMultiError) AllErrors() []error { return m }

// DeleteTestRequestValidationError is the validation error returned by
// DeleteTestRequest.Validate if the designated constraints aren't met.
type DeleteTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestRequestValidationError) ErrorName() string {
	return "DeleteTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestRequestValidationError{}

// Validate checks the field values on DeleteTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestResponseMultiError, or nil if none found.
func (m *DeleteTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTestResponseMultiError(errors)
	}

	return nil
}

// DeleteTestResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteTestResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestResponseMultiError) AllErrors() []error { return m }

// DeleteTestResponseValidationError is the validation error returned by
// DeleteTestResponse.Validate if the designated constraints aren't met.
type DeleteTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestResponseValidationError) ErrorName() string {
	return "DeleteTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestResponseValidationError{}

// Validate checks the field values on GetRunRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRunRequestMultiError, or
// nil if none found.
func (m *GetRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRunRequestMultiError(errors)
	}

	return nil
}

// GetRunRequestMultiError is an error wrapping multiple validation errors
// returned by GetRunRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunRequestMultiError) AllErrors() []error { return m }

// GetRunRequestValidationError is the validation error returned by
// GetRunRequest.Validate if the designated constraints aren't met.
type GetRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunRequestValidationError) ErrorName() string { return "GetRunRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunRequestValidationError{}

// Validate checks the field values on GetRunResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRunResponseMultiError,
// or nil if none found.
func (m *GetRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponseValidationError{
				field:  "Run",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRunResponseMultiError(errors)
	}

	return nil
}

// GetRunResponseMultiError is an error wrapping multiple validation errors
// returned by GetRunResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunResponseMultiError) AllErrors() []error { return m }

// GetRunResponseValidationError is the validation error returned by
// GetRunResponse.Validate if the designated constraints aren't met.
type GetRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunResponseValidationError) ErrorName() string { return "GetRunResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunResponseValidationError{}

// Validate checks the field values on ListRunsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRunsRequestMultiError, or nil if none found.
func (m *ListRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScheduledBefore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "ScheduledBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "ScheduledBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduledBefore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRunsRequestValidationError{
				field:  "ScheduledBefore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScheduledAfter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "ScheduledAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "ScheduledAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduledAfter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRunsRequestValidationError{
				field:  "ScheduledAfter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartedBefore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "StartedBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "StartedBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedBefore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRunsRequestValidationError{
				field:  "StartedBefore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartedAfter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "StartedAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "StartedAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAfter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRunsRequestValidationError{
				field:  "StartedAfter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFinishedBefore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "FinishedBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "FinishedBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinishedBefore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRunsRequestValidationError{
				field:  "FinishedBefore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFinishedAfter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "FinishedAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "FinishedAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinishedAfter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRunsRequestValidationError{
				field:  "FinishedAfter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRunsRequestMultiError(errors)
	}

	return nil
}

// ListRunsRequestMultiError is an error wrapping multiple validation errors
// returned by ListRunsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRunsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRunsRequestMultiError) AllErrors() []error { return m }

// ListRunsRequestValidationError is the validation error returned by
// ListRunsRequest.Validate if the designated constraints aren't met.
type ListRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunsRequestValidationError) ErrorName() string { return "ListRunsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunsRequestValidationError{}

// Validate checks the field values on ListRunsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRunsResponseMultiError, or nil if none found.
func (m *ListRunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRunsResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRunsResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRunsResponseValidationError{
					field:  fmt.Sprintf("Runs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRunsResponseMultiError(errors)
	}

	return nil
}

// ListRunsResponseMultiError is an error wrapping multiple validation errors
// returned by ListRunsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRunsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRunsResponseMultiError) AllErrors() []error { return m }

// ListRunsResponseValidationError is the validation error returned by
// ListRunsResponse.Validate if the designated constraints aren't met.
type ListRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunsResponseValidationError) ErrorName() string { return "ListRunsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunsResponseValidationError{}

// Validate checks the field values on ScheduleRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleRunRequestMultiError, or nil if none found.
func (m *ScheduleRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestId

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetTestMatrix()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleRunRequestValidationError{
					field:  "TestMatrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleRunRequestValidationError{
					field:  "TestMatrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestMatrix()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleRunRequestValidationError{
				field:  "TestMatrix",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScheduleRunRequestMultiError(errors)
	}

	return nil
}

// ScheduleRunRequestMultiError is an error wrapping multiple validation errors
// returned by ScheduleRunRequest.ValidateAll() if the designated constraints
// aren't met.
type ScheduleRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleRunRequestMultiError) AllErrors() []error { return m }

// ScheduleRunRequestValidationError is the validation error returned by
// ScheduleRunRequest.Validate if the designated constraints aren't met.
type ScheduleRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleRunRequestValidationError) ErrorName() string {
	return "ScheduleRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleRunRequestValidationError{}

// Validate checks the field values on ScheduleRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleRunResponseMultiError, or nil if none found.
func (m *ScheduleRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScheduleRunResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScheduleRunResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScheduleRunResponseValidationError{
					field:  fmt.Sprintf("Runs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ScheduleRunResponseMultiError(errors)
	}

	return nil
}

// ScheduleRunResponseMultiError is an error wrapping multiple validation
// errors returned by ScheduleRunResponse.ValidateAll() if the designated
// constraints aren't met.
type ScheduleRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleRunResponseMultiError) AllErrors() []error { return m }

// ScheduleRunResponseValidationError is the validation error returned by
// ScheduleRunResponse.Validate if the designated constraints aren't met.
type ScheduleRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleRunResponseValidationError) ErrorName() string {
	return "ScheduleRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleRunResponseValidationError{}

// Validate checks the field values on ListRunnersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRunnersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRunnersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRunnersRequestMultiError, or nil if none found.
func (m *ListRunnersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRunnersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRunnersRequestMultiError(errors)
	}

	return nil
}

// ListRunnersRequestMultiError is an error wrapping multiple validation errors
// returned by ListRunnersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRunnersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRunnersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRunnersRequestMultiError) AllErrors() []error { return m }

// ListRunnersRequestValidationError is the validation error returned by
// ListRunnersRequest.Validate if the designated constraints aren't met.
type ListRunnersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunnersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunnersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunnersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunnersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunnersRequestValidationError) ErrorName() string {
	return "ListRunnersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRunnersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunnersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunnersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunnersRequestValidationError{}

// Validate checks the field values on ListRunnersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRunnersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRunnersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRunnersResponseMultiError, or nil if none found.
func (m *ListRunnersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRunnersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRunners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRunnersResponseValidationError{
						field:  fmt.Sprintf("Runners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRunnersResponseValidationError{
						field:  fmt.Sprintf("Runners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRunnersResponseValidationError{
					field:  fmt.Sprintf("Runners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRunnersResponseMultiError(errors)
	}

	return nil
}

// ListRunnersResponseMultiError is an error wrapping multiple validation
// errors returned by ListRunnersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRunnersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRunnersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRunnersResponseMultiError) AllErrors() []error { return m }

// ListRunnersResponseValidationError is the validation error returned by
// ListRunnersResponse.Validate if the designated constraints aren't met.
type ListRunnersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunnersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunnersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunnersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunnersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunnersResponseValidationError) ErrorName() string {
	return "ListRunnersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRunnersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunnersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunnersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunnersResponseValidationError{}
