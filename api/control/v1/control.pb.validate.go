// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: control/v1/control.proto

package controlv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterTestRequestMultiError, or nil if none found.
func (m *RegisterTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		err := RegisterTestRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Labels

	if m.GetRunConfig() == nil {
		err := RegisterTestRequestValidationError{
			field:  "RunConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRunConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterTestRequestValidationError{
					field:  "RunConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterTestRequestValidationError{
					field:  "RunConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterTestRequestValidationError{
				field:  "RunConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CronSchedule

	if all {
		switch v := interface{}(m.GetMatrix()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterTestRequestValidationError{
					field:  "Matrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterTestRequestValidationError{
					field:  "Matrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatrix()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterTestRequestValidationError{
				field:  "Matrix",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterTestRequestMultiError(errors)
	}

	return nil
}

// RegisterTestRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterTestRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterTestRequestMultiError) AllErrors() []error { return m }

// RegisterTestRequestValidationError is the validation error returned by
// RegisterTestRequest.Validate if the designated constraints aren't met.
type RegisterTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterTestRequestValidationError) ErrorName() string {
	return "RegisterTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterTestRequestValidationError{}

// Validate checks the field values on RegisterTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterTestResponseMultiError, or nil if none found.
func (m *RegisterTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterTestResponseValidationError{
					field:  "Test",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterTestResponseValidationError{
					field:  "Test",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterTestResponseValidationError{
				field:  "Test",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterTestResponseMultiError(errors)
	}

	return nil
}

// RegisterTestResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterTestResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterTestResponseMultiError) AllErrors() []error { return m }

// RegisterTestResponseValidationError is the validation error returned by
// RegisterTestResponse.Validate if the designated constraints aren't met.
type RegisterTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterTestResponseValidationError) ErrorName() string {
	return "RegisterTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterTestResponseValidationError{}

// Validate checks the field values on UpdateTestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestRequestMultiError, or nil if none found.
func (m *UpdateTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetRunConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "RunConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "RunConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestRequestValidationError{
				field:  "RunConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for CronSchedule

	if all {
		switch v := interface{}(m.GetMatrix()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "Matrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTestRequestValidationError{
					field:  "Matrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatrix()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestRequestValidationError{
				field:  "Matrix",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTestRequestMultiError(errors)
	}

	return nil
}

// UpdateTestRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTestRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestRequestMultiError) AllErrors() []error { return m }

// UpdateTestRequestValidationError is the validation error returned by
// UpdateTestRequest.Validate if the designated constraints aren't met.
type UpdateTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestRequestValidationError) ErrorName() string {
	return "UpdateTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestRequestValidationError{}

// Validate checks the field values on UpdateTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestResponseMultiError, or nil if none found.
func (m *UpdateTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTestResponseMultiError(errors)
	}

	return nil
}

// UpdateTestResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateTestResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestResponseMultiError) AllErrors() []error { return m }

// UpdateTestResponseValidationError is the validation error returned by
// UpdateTestResponse.Validate if the designated constraints aren't met.
type UpdateTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestResponseValidationError) ErrorName() string {
	return "UpdateTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestResponseValidationError{}

// Validate checks the field values on DeleteTestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestRequestMultiError, or nil if none found.
func (m *DeleteTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTestRequestMultiError(errors)
	}

	return nil
}

// DeleteTestRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTestRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestRequestMultiError) AllErrors() []error { return m }

// DeleteTestRequestValidationError is the validation error returned by
// DeleteTestRequest.Validate if the designated constraints aren't met.
type DeleteTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestRequestValidationError) ErrorName() string {
	return "DeleteTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestRequestValidationError{}

// Validate checks the field values on DeleteTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestResponseMultiError, or nil if none found.
func (m *DeleteTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTestResponseMultiError(errors)
	}

	return nil
}

// DeleteTestResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteTestResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestResponseMultiError) AllErrors() []error { return m }

// DeleteTestResponseValidationError is the validation error returned by
// DeleteTestResponse.Validate if the designated constraints aren't met.
type DeleteTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestResponseValidationError) ErrorName() string {
	return "DeleteTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestResponseValidationError{}

// Validate checks the field values on ScheduleRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleRunRequestMultiError, or nil if none found.
func (m *ScheduleRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestId

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetTestMatrix()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleRunRequestValidationError{
					field:  "TestMatrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleRunRequestValidationError{
					field:  "TestMatrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestMatrix()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleRunRequestValidationError{
				field:  "TestMatrix",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScheduleRunRequestMultiError(errors)
	}

	return nil
}

// ScheduleRunRequestMultiError is an error wrapping multiple validation errors
// returned by ScheduleRunRequest.ValidateAll() if the designated constraints
// aren't met.
type ScheduleRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleRunRequestMultiError) AllErrors() []error { return m }

// ScheduleRunRequestValidationError is the validation error returned by
// ScheduleRunRequest.Validate if the designated constraints aren't met.
type ScheduleRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleRunRequestValidationError) ErrorName() string {
	return "ScheduleRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleRunRequestValidationError{}

// Validate checks the field values on ScheduleRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleRunResponseMultiError, or nil if none found.
func (m *ScheduleRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScheduleRunResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScheduleRunResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScheduleRunResponseValidationError{
					field:  fmt.Sprintf("Runs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ScheduleRunResponseMultiError(errors)
	}

	return nil
}

// ScheduleRunResponseMultiError is an error wrapping multiple validation
// errors returned by ScheduleRunResponse.ValidateAll() if the designated
// constraints aren't met.
type ScheduleRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleRunResponseMultiError) AllErrors() []error { return m }

// ScheduleRunResponseValidationError is the validation error returned by
// ScheduleRunResponse.Validate if the designated constraints aren't met.
type ScheduleRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleRunResponseValidationError) ErrorName() string {
	return "ScheduleRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleRunResponseValidationError{}
