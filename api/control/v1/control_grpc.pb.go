// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/control/v1/control.proto

package control

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	RegisterTest(ctx context.Context, in *RegisterTestRequest, opts ...grpc.CallOption) (*RegisterTestResponse, error)
	UpdateTest(ctx context.Context, in *UpdateTestRequest, opts ...grpc.CallOption) (*UpdateTestResponse, error)
	GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error)
	ListTests(ctx context.Context, in *ListTestsRequest, opts ...grpc.CallOption) (*ListTestsResponse, error)
	ArchiveTest(ctx context.Context, in *ArchiveTestRequest, opts ...grpc.CallOption) (*ArchiveTestResponse, error)
	DefineTestSuite(ctx context.Context, in *DefineTestSuiteRequest, opts ...grpc.CallOption) (*DefineTestSuiteResponse, error)
	UpdateTestSuite(ctx context.Context, in *UpdateTestSuiteRequest, opts ...grpc.CallOption) (*UpdateTestSuiteResponse, error)
	GetTestSuite(ctx context.Context, in *GetTestSuiteRequest, opts ...grpc.CallOption) (*GetTestSuiteResponse, error)
	ListTestSuites(ctx context.Context, in *ListTestSuitesRequest, opts ...grpc.CallOption) (*ListTestSuitesResponse, error)
	ArchiveTestSuite(ctx context.Context, in *ArchiveTestSuiteRequest, opts ...grpc.CallOption) (*ArchiveTestSuiteResponse, error)
	GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*GetRunResponse, error)
	ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error)
	ListRunners(ctx context.Context, in *ListRunnersRequest, opts ...grpc.CallOption) (*ListRunnersResponse, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) RegisterTest(ctx context.Context, in *RegisterTestRequest, opts ...grpc.CallOption) (*RegisterTestResponse, error) {
	out := new(RegisterTestResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/RegisterTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UpdateTest(ctx context.Context, in *UpdateTestRequest, opts ...grpc.CallOption) (*UpdateTestResponse, error) {
	out := new(UpdateTestResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/UpdateTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error) {
	out := new(GetTestResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/GetTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ListTests(ctx context.Context, in *ListTestsRequest, opts ...grpc.CallOption) (*ListTestsResponse, error) {
	out := new(ListTestsResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/ListTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ArchiveTest(ctx context.Context, in *ArchiveTestRequest, opts ...grpc.CallOption) (*ArchiveTestResponse, error) {
	out := new(ArchiveTestResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/ArchiveTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) DefineTestSuite(ctx context.Context, in *DefineTestSuiteRequest, opts ...grpc.CallOption) (*DefineTestSuiteResponse, error) {
	out := new(DefineTestSuiteResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/DefineTestSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UpdateTestSuite(ctx context.Context, in *UpdateTestSuiteRequest, opts ...grpc.CallOption) (*UpdateTestSuiteResponse, error) {
	out := new(UpdateTestSuiteResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/UpdateTestSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetTestSuite(ctx context.Context, in *GetTestSuiteRequest, opts ...grpc.CallOption) (*GetTestSuiteResponse, error) {
	out := new(GetTestSuiteResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/GetTestSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ListTestSuites(ctx context.Context, in *ListTestSuitesRequest, opts ...grpc.CallOption) (*ListTestSuitesResponse, error) {
	out := new(ListTestSuitesResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/ListTestSuites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ArchiveTestSuite(ctx context.Context, in *ArchiveTestSuiteRequest, opts ...grpc.CallOption) (*ArchiveTestSuiteResponse, error) {
	out := new(ArchiveTestSuiteResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/ArchiveTestSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*GetRunResponse, error) {
	out := new(GetRunResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/GetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/ListRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error) {
	out := new(GetRunnerResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/GetRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ListRunners(ctx context.Context, in *ListRunnersRequest, opts ...grpc.CallOption) (*ListRunnersResponse, error) {
	out := new(ListRunnersResponse)
	err := c.cc.Invoke(ctx, "/tstr.control.v1.TestService/ListRunners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	RegisterTest(context.Context, *RegisterTestRequest) (*RegisterTestResponse, error)
	UpdateTest(context.Context, *UpdateTestRequest) (*UpdateTestResponse, error)
	GetTest(context.Context, *GetTestRequest) (*GetTestResponse, error)
	ListTests(context.Context, *ListTestsRequest) (*ListTestsResponse, error)
	ArchiveTest(context.Context, *ArchiveTestRequest) (*ArchiveTestResponse, error)
	DefineTestSuite(context.Context, *DefineTestSuiteRequest) (*DefineTestSuiteResponse, error)
	UpdateTestSuite(context.Context, *UpdateTestSuiteRequest) (*UpdateTestSuiteResponse, error)
	GetTestSuite(context.Context, *GetTestSuiteRequest) (*GetTestSuiteResponse, error)
	ListTestSuites(context.Context, *ListTestSuitesRequest) (*ListTestSuitesResponse, error)
	ArchiveTestSuite(context.Context, *ArchiveTestSuiteRequest) (*ArchiveTestSuiteResponse, error)
	GetRun(context.Context, *GetRunRequest) (*GetRunResponse, error)
	ListRuns(context.Context, *ListRunsRequest) (*ListRunsResponse, error)
	GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error)
	ListRunners(context.Context, *ListRunnersRequest) (*ListRunnersResponse, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) RegisterTest(context.Context, *RegisterTestRequest) (*RegisterTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTest not implemented")
}
func (UnimplementedTestServiceServer) UpdateTest(context.Context, *UpdateTestRequest) (*UpdateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTest not implemented")
}
func (UnimplementedTestServiceServer) GetTest(context.Context, *GetTestRequest) (*GetTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTest not implemented")
}
func (UnimplementedTestServiceServer) ListTests(context.Context, *ListTestsRequest) (*ListTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTests not implemented")
}
func (UnimplementedTestServiceServer) ArchiveTest(context.Context, *ArchiveTestRequest) (*ArchiveTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveTest not implemented")
}
func (UnimplementedTestServiceServer) DefineTestSuite(context.Context, *DefineTestSuiteRequest) (*DefineTestSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineTestSuite not implemented")
}
func (UnimplementedTestServiceServer) UpdateTestSuite(context.Context, *UpdateTestSuiteRequest) (*UpdateTestSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestSuite not implemented")
}
func (UnimplementedTestServiceServer) GetTestSuite(context.Context, *GetTestSuiteRequest) (*GetTestSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestSuite not implemented")
}
func (UnimplementedTestServiceServer) ListTestSuites(context.Context, *ListTestSuitesRequest) (*ListTestSuitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestSuites not implemented")
}
func (UnimplementedTestServiceServer) ArchiveTestSuite(context.Context, *ArchiveTestSuiteRequest) (*ArchiveTestSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveTestSuite not implemented")
}
func (UnimplementedTestServiceServer) GetRun(context.Context, *GetRunRequest) (*GetRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (UnimplementedTestServiceServer) ListRuns(context.Context, *ListRunsRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuns not implemented")
}
func (UnimplementedTestServiceServer) GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedTestServiceServer) ListRunners(context.Context, *ListRunnersRequest) (*ListRunnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunners not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_RegisterTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).RegisterTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/RegisterTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).RegisterTest(ctx, req.(*RegisterTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UpdateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UpdateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/UpdateTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UpdateTest(ctx, req.(*UpdateTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/GetTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetTest(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ListTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ListTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/ListTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ListTests(ctx, req.(*ListTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ArchiveTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ArchiveTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/ArchiveTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ArchiveTest(ctx, req.(*ArchiveTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_DefineTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefineTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).DefineTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/DefineTestSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).DefineTestSuite(ctx, req.(*DefineTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UpdateTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UpdateTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/UpdateTestSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UpdateTestSuite(ctx, req.(*UpdateTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/GetTestSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetTestSuite(ctx, req.(*GetTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ListTestSuites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestSuitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ListTestSuites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/ListTestSuites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ListTestSuites(ctx, req.(*ListTestSuitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ArchiveTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ArchiveTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/ArchiveTestSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ArchiveTestSuite(ctx, req.(*ArchiveTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/GetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetRun(ctx, req.(*GetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ListRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ListRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/ListRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ListRuns(ctx, req.(*ListRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/GetRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetRunner(ctx, req.(*GetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ListRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ListRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.control.v1.TestService/ListRunners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ListRunners(ctx, req.(*ListRunnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tstr.control.v1.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTest",
			Handler:    _TestService_RegisterTest_Handler,
		},
		{
			MethodName: "UpdateTest",
			Handler:    _TestService_UpdateTest_Handler,
		},
		{
			MethodName: "GetTest",
			Handler:    _TestService_GetTest_Handler,
		},
		{
			MethodName: "ListTests",
			Handler:    _TestService_ListTests_Handler,
		},
		{
			MethodName: "ArchiveTest",
			Handler:    _TestService_ArchiveTest_Handler,
		},
		{
			MethodName: "DefineTestSuite",
			Handler:    _TestService_DefineTestSuite_Handler,
		},
		{
			MethodName: "UpdateTestSuite",
			Handler:    _TestService_UpdateTestSuite_Handler,
		},
		{
			MethodName: "GetTestSuite",
			Handler:    _TestService_GetTestSuite_Handler,
		},
		{
			MethodName: "ListTestSuites",
			Handler:    _TestService_ListTestSuites_Handler,
		},
		{
			MethodName: "ArchiveTestSuite",
			Handler:    _TestService_ArchiveTestSuite_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _TestService_GetRun_Handler,
		},
		{
			MethodName: "ListRuns",
			Handler:    _TestService_ListRuns_Handler,
		},
		{
			MethodName: "GetRunner",
			Handler:    _TestService_GetRunner_Handler,
		},
		{
			MethodName: "ListRunners",
			Handler:    _TestService_ListRunners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/control/v1/control.proto",
}
