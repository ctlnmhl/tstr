// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/admin/v1/admin.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/nanzhong/tstr/api/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.AccessToken_Scope(0)
)

// Validate checks the field values on IssueAccessTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueAccessTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueAccessTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueAccessTokenRequestMultiError, or nil if none found.
func (m *IssueAccessTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueAccessTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return IssueAccessTokenRequestMultiError(errors)
	}

	return nil
}

// IssueAccessTokenRequestMultiError is an error wrapping multiple validation
// errors returned by IssueAccessTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type IssueAccessTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueAccessTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueAccessTokenRequestMultiError) AllErrors() []error { return m }

// IssueAccessTokenRequestValidationError is the validation error returned by
// IssueAccessTokenRequest.Validate if the designated constraints aren't met.
type IssueAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueAccessTokenRequestValidationError) ErrorName() string {
	return "IssueAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueAccessTokenRequestValidationError{}

// Validate checks the field values on IssueAccessTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueAccessTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueAccessTokenResponseMultiError, or nil if none found.
func (m *IssueAccessTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueAccessTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccessToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssueAccessTokenResponseValidationError{
					field:  "AccessToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssueAccessTokenResponseValidationError{
					field:  "AccessToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssueAccessTokenResponseValidationError{
				field:  "AccessToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IssueAccessTokenResponseMultiError(errors)
	}

	return nil
}

// IssueAccessTokenResponseMultiError is an error wrapping multiple validation
// errors returned by IssueAccessTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type IssueAccessTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueAccessTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueAccessTokenResponseMultiError) AllErrors() []error { return m }

// IssueAccessTokenResponseValidationError is the validation error returned by
// IssueAccessTokenResponse.Validate if the designated constraints aren't met.
type IssueAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueAccessTokenResponseValidationError) ErrorName() string {
	return "IssueAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IssueAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueAccessTokenResponseValidationError{}

// Validate checks the field values on GetAccessTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessTokenRequestMultiError, or nil if none found.
func (m *GetAccessTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAccessTokenRequestMultiError(errors)
	}

	return nil
}

// GetAccessTokenRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccessTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccessTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessTokenRequestMultiError) AllErrors() []error { return m }

// GetAccessTokenRequestValidationError is the validation error returned by
// GetAccessTokenRequest.Validate if the designated constraints aren't met.
type GetAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessTokenRequestValidationError) ErrorName() string {
	return "GetAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessTokenRequestValidationError{}

// Validate checks the field values on GetAccessTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessTokenResponseMultiError, or nil if none found.
func (m *GetAccessTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccessToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccessTokenResponseValidationError{
					field:  "AccessToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccessTokenResponseValidationError{
					field:  "AccessToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccessTokenResponseValidationError{
				field:  "AccessToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccessTokenResponseMultiError(errors)
	}

	return nil
}

// GetAccessTokenResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccessTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccessTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessTokenResponseMultiError) AllErrors() []error { return m }

// GetAccessTokenResponseValidationError is the validation error returned by
// GetAccessTokenResponse.Validate if the designated constraints aren't met.
type GetAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessTokenResponseValidationError) ErrorName() string {
	return "GetAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessTokenResponseValidationError{}

// Validate checks the field values on ListAccessTokensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccessTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccessTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccessTokensRequestMultiError, or nil if none found.
func (m *ListAccessTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccessTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IncludeExpired

	// no validation rules for IncludeRevoked

	if len(errors) > 0 {
		return ListAccessTokensRequestMultiError(errors)
	}

	return nil
}

// ListAccessTokensRequestMultiError is an error wrapping multiple validation
// errors returned by ListAccessTokensRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAccessTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccessTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccessTokensRequestMultiError) AllErrors() []error { return m }

// ListAccessTokensRequestValidationError is the validation error returned by
// ListAccessTokensRequest.Validate if the designated constraints aren't met.
type ListAccessTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccessTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccessTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccessTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccessTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccessTokensRequestValidationError) ErrorName() string {
	return "ListAccessTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccessTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccessTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccessTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccessTokensRequestValidationError{}

// Validate checks the field values on ListAccessTokensResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccessTokensResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccessTokensResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccessTokensResponseMultiError, or nil if none found.
func (m *ListAccessTokensResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccessTokensResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccessTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccessTokensResponseValidationError{
						field:  fmt.Sprintf("AccessTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccessTokensResponseValidationError{
						field:  fmt.Sprintf("AccessTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccessTokensResponseValidationError{
					field:  fmt.Sprintf("AccessTokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAccessTokensResponseMultiError(errors)
	}

	return nil
}

// ListAccessTokensResponseMultiError is an error wrapping multiple validation
// errors returned by ListAccessTokensResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAccessTokensResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccessTokensResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccessTokensResponseMultiError) AllErrors() []error { return m }

// ListAccessTokensResponseValidationError is the validation error returned by
// ListAccessTokensResponse.Validate if the designated constraints aren't met.
type ListAccessTokensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccessTokensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccessTokensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccessTokensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccessTokensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccessTokensResponseValidationError) ErrorName() string {
	return "ListAccessTokensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccessTokensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccessTokensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccessTokensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccessTokensResponseValidationError{}

// Validate checks the field values on RevokeAccessTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeAccessTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeAccessTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeAccessTokenRequestMultiError, or nil if none found.
func (m *RevokeAccessTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeAccessTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RevokeAccessTokenRequestMultiError(errors)
	}

	return nil
}

// RevokeAccessTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RevokeAccessTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RevokeAccessTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeAccessTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeAccessTokenRequestMultiError) AllErrors() []error { return m }

// RevokeAccessTokenRequestValidationError is the validation error returned by
// RevokeAccessTokenRequest.Validate if the designated constraints aren't met.
type RevokeAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeAccessTokenRequestValidationError) ErrorName() string {
	return "RevokeAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeAccessTokenRequestValidationError{}

// Validate checks the field values on RevokeAccessTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeAccessTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeAccessTokenResponseMultiError, or nil if none found.
func (m *RevokeAccessTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeAccessTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevokeAccessTokenResponseMultiError(errors)
	}

	return nil
}

// RevokeAccessTokenResponseMultiError is an error wrapping multiple validation
// errors returned by RevokeAccessTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type RevokeAccessTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeAccessTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeAccessTokenResponseMultiError) AllErrors() []error { return m }

// RevokeAccessTokenResponseValidationError is the validation error returned by
// RevokeAccessTokenResponse.Validate if the designated constraints aren't met.
type RevokeAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeAccessTokenResponseValidationError) ErrorName() string {
	return "RevokeAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeAccessTokenResponseValidationError{}

// Validate checks the field values on ApproveRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveRunnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveRunnerRequestMultiError, or nil if none found.
func (m *ApproveRunnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveRunnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ApproveRunnerRequestMultiError(errors)
	}

	return nil
}

// ApproveRunnerRequestMultiError is an error wrapping multiple validation
// errors returned by ApproveRunnerRequest.ValidateAll() if the designated
// constraints aren't met.
type ApproveRunnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveRunnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveRunnerRequestMultiError) AllErrors() []error { return m }

// ApproveRunnerRequestValidationError is the validation error returned by
// ApproveRunnerRequest.Validate if the designated constraints aren't met.
type ApproveRunnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveRunnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveRunnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveRunnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveRunnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveRunnerRequestValidationError) ErrorName() string {
	return "ApproveRunnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveRunnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveRunnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveRunnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveRunnerRequestValidationError{}

// Validate checks the field values on ApproveRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveRunnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveRunnerResponseMultiError, or nil if none found.
func (m *ApproveRunnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveRunnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApproveRunnerResponseMultiError(errors)
	}

	return nil
}

// ApproveRunnerResponseMultiError is an error wrapping multiple validation
// errors returned by ApproveRunnerResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveRunnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveRunnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveRunnerResponseMultiError) AllErrors() []error { return m }

// ApproveRunnerResponseValidationError is the validation error returned by
// ApproveRunnerResponse.Validate if the designated constraints aren't met.
type ApproveRunnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveRunnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveRunnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveRunnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveRunnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveRunnerResponseValidationError) ErrorName() string {
	return "ApproveRunnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveRunnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveRunnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveRunnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveRunnerResponseValidationError{}

// Validate checks the field values on DenyRunnerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DenyRunnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DenyRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DenyRunnerRequestMultiError, or nil if none found.
func (m *DenyRunnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DenyRunnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DenyRunnerRequestMultiError(errors)
	}

	return nil
}

// DenyRunnerRequestMultiError is an error wrapping multiple validation errors
// returned by DenyRunnerRequest.ValidateAll() if the designated constraints
// aren't met.
type DenyRunnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DenyRunnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DenyRunnerRequestMultiError) AllErrors() []error { return m }

// DenyRunnerRequestValidationError is the validation error returned by
// DenyRunnerRequest.Validate if the designated constraints aren't met.
type DenyRunnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DenyRunnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DenyRunnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DenyRunnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DenyRunnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DenyRunnerRequestValidationError) ErrorName() string {
	return "DenyRunnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DenyRunnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDenyRunnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DenyRunnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DenyRunnerRequestValidationError{}

// Validate checks the field values on DenyRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DenyRunnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DenyRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DenyRunnerResponseMultiError, or nil if none found.
func (m *DenyRunnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DenyRunnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DenyRunnerResponseMultiError(errors)
	}

	return nil
}

// DenyRunnerResponseMultiError is an error wrapping multiple validation errors
// returned by DenyRunnerResponse.ValidateAll() if the designated constraints
// aren't met.
type DenyRunnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DenyRunnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DenyRunnerResponseMultiError) AllErrors() []error { return m }

// DenyRunnerResponseValidationError is the validation error returned by
// DenyRunnerResponse.Validate if the designated constraints aren't met.
type DenyRunnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DenyRunnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DenyRunnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DenyRunnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DenyRunnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DenyRunnerResponseValidationError) ErrorName() string {
	return "DenyRunnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DenyRunnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDenyRunnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DenyRunnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DenyRunnerResponseValidationError{}
