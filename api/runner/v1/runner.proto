syntax = "proto3";

package tstr.runner.v1;

import "common/v1/common.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service RunnerService {
  rpc RegisterRunner(RegisterRunnerRequest) returns (RegisterRunnerResponse);
  rpc NextRun(NextRunRequest) returns (NextRunResponse);
  rpc SubmitRun(stream SubmitRunRequest) returns (SubmitRunResponse);
}

message RegisterRunnerRequest {
  string name = 1
    [(validate.rules).string = {min_len: 1, max_len: 200}];
  repeated string namespace_selectors = 2;
  map<string, string> accept_test_label_selectors = 3;
  map<string, string> reject_test_label_selectors = 4;
}

message RegisterRunnerResponse {
  tstr.common.v1.Runner runner = 1; // required
}

message NextRunRequest {
  string id = 1
    [(validate.rules).string.uuid = true];
}

message NextRunResponse {
  tstr.common.v1.Run run = 1; // required
}

message SubmitRunRequest {
  string id = 1
    [(validate.rules).string = {ignore_empty: true, uuid: true}];
  string run_id = 2
    [(validate.rules).string = {ignore_empty: true, uuid: true}];
  tstr.common.v1.Run.Result result = 3;
  repeated tstr.common.v1.Run.Log logs = 4;
  map <string,string> result_data = 5;

  google.protobuf.Timestamp started_at = 10;
  google.protobuf.Timestamp finished_at = 11;

}

message SubmitRunResponse {}
