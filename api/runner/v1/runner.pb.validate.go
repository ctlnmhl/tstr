// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/runner/v1/runner.proto

package runner

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/nanzhong/tstr/api/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.Run_Result(0)
)

// define the regex for a UUID once up-front
var _runner_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegisterRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterRunnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRunnerRequestMultiError, or nil if none found.
func (m *RegisterRunnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRunnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		err := RegisterRunnerRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AcceptTestLabelSelectors

	// no validation rules for RejectTestLabelSelectors

	if len(errors) > 0 {
		return RegisterRunnerRequestMultiError(errors)
	}

	return nil
}

// RegisterRunnerRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterRunnerRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterRunnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRunnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRunnerRequestMultiError) AllErrors() []error { return m }

// RegisterRunnerRequestValidationError is the validation error returned by
// RegisterRunnerRequest.Validate if the designated constraints aren't met.
type RegisterRunnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRunnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRunnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRunnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRunnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRunnerRequestValidationError) ErrorName() string {
	return "RegisterRunnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterRunnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRunnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRunnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRunnerRequestValidationError{}

// Validate checks the field values on RegisterRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterRunnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRunnerResponseMultiError, or nil if none found.
func (m *RegisterRunnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRunnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRunnerResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRunnerResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRunnerResponseValidationError{
				field:  "Runner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterRunnerResponseMultiError(errors)
	}

	return nil
}

// RegisterRunnerResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterRunnerResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterRunnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRunnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRunnerResponseMultiError) AllErrors() []error { return m }

// RegisterRunnerResponseValidationError is the validation error returned by
// RegisterRunnerResponse.Validate if the designated constraints aren't met.
type RegisterRunnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRunnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRunnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRunnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRunnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRunnerResponseValidationError) ErrorName() string {
	return "RegisterRunnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterRunnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRunnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRunnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRunnerResponseValidationError{}

// Validate checks the field values on NextRunRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NextRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextRunRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NextRunRequestMultiError,
// or nil if none found.
func (m *NextRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NextRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = NextRunRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NextRunRequestMultiError(errors)
	}

	return nil
}

func (m *NextRunRequest) _validateUuid(uuid string) error {
	if matched := _runner_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// NextRunRequestMultiError is an error wrapping multiple validation errors
// returned by NextRunRequest.ValidateAll() if the designated constraints
// aren't met.
type NextRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextRunRequestMultiError) AllErrors() []error { return m }

// NextRunRequestValidationError is the validation error returned by
// NextRunRequest.Validate if the designated constraints aren't met.
type NextRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextRunRequestValidationError) ErrorName() string { return "NextRunRequestValidationError" }

// Error satisfies the builtin error interface
func (e NextRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextRunRequestValidationError{}

// Validate checks the field values on NextRunResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NextRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NextRunResponseMultiError, or nil if none found.
func (m *NextRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NextRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NextRunResponseValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NextRunResponseValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NextRunResponseValidationError{
				field:  "Run",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NextRunResponseMultiError(errors)
	}

	return nil
}

// NextRunResponseMultiError is an error wrapping multiple validation errors
// returned by NextRunResponse.ValidateAll() if the designated constraints
// aren't met.
type NextRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextRunResponseMultiError) AllErrors() []error { return m }

// NextRunResponseValidationError is the validation error returned by
// NextRunResponse.Validate if the designated constraints aren't met.
type NextRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextRunResponseValidationError) ErrorName() string { return "NextRunResponseValidationError" }

// Error satisfies the builtin error interface
func (e NextRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextRunResponseValidationError{}

// Validate checks the field values on SubmitRunRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubmitRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitRunRequestMultiError, or nil if none found.
func (m *SubmitRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = SubmitRunRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetRunId()); err != nil {
		err = SubmitRunRequestValidationError{
			field:  "RunId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Result

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitRunRequestValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitRunRequestValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitRunRequestValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitRunRequestValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitRunRequestValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitRunRequestValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFinishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitRunRequestValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitRunRequestValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitRunRequestValidationError{
				field:  "FinishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubmitRunRequestMultiError(errors)
	}

	return nil
}

func (m *SubmitRunRequest) _validateUuid(uuid string) error {
	if matched := _runner_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SubmitRunRequestMultiError is an error wrapping multiple validation errors
// returned by SubmitRunRequest.ValidateAll() if the designated constraints
// aren't met.
type SubmitRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitRunRequestMultiError) AllErrors() []error { return m }

// SubmitRunRequestValidationError is the validation error returned by
// SubmitRunRequest.Validate if the designated constraints aren't met.
type SubmitRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitRunRequestValidationError) ErrorName() string { return "SubmitRunRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubmitRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitRunRequestValidationError{}

// Validate checks the field values on SubmitRunResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubmitRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitRunResponseMultiError, or nil if none found.
func (m *SubmitRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubmitRunResponseMultiError(errors)
	}

	return nil
}

// SubmitRunResponseMultiError is an error wrapping multiple validation errors
// returned by SubmitRunResponse.ValidateAll() if the designated constraints
// aren't met.
type SubmitRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitRunResponseMultiError) AllErrors() []error { return m }

// SubmitRunResponseValidationError is the validation error returned by
// SubmitRunResponse.Validate if the designated constraints aren't met.
type SubmitRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitRunResponseValidationError) ErrorName() string {
	return "SubmitRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitRunResponseValidationError{}
