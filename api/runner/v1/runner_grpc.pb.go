// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: runner/v1/runner.proto

package runnerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunnerServiceClient is the client API for RunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerServiceClient interface {
	RegisterRunner(ctx context.Context, in *RegisterRunnerRequest, opts ...grpc.CallOption) (*RegisterRunnerResponse, error)
	NextRun(ctx context.Context, in *NextRunRequest, opts ...grpc.CallOption) (*NextRunResponse, error)
	SubmitRun(ctx context.Context, opts ...grpc.CallOption) (RunnerService_SubmitRunClient, error)
}

type runnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerServiceClient(cc grpc.ClientConnInterface) RunnerServiceClient {
	return &runnerServiceClient{cc}
}

func (c *runnerServiceClient) RegisterRunner(ctx context.Context, in *RegisterRunnerRequest, opts ...grpc.CallOption) (*RegisterRunnerResponse, error) {
	out := new(RegisterRunnerResponse)
	err := c.cc.Invoke(ctx, "/tstr.runner.v1.RunnerService/RegisterRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) NextRun(ctx context.Context, in *NextRunRequest, opts ...grpc.CallOption) (*NextRunResponse, error) {
	out := new(NextRunResponse)
	err := c.cc.Invoke(ctx, "/tstr.runner.v1.RunnerService/NextRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) SubmitRun(ctx context.Context, opts ...grpc.CallOption) (RunnerService_SubmitRunClient, error) {
	stream, err := c.cc.NewStream(ctx, &RunnerService_ServiceDesc.Streams[0], "/tstr.runner.v1.RunnerService/SubmitRun", opts...)
	if err != nil {
		return nil, err
	}
	x := &runnerServiceSubmitRunClient{stream}
	return x, nil
}

type RunnerService_SubmitRunClient interface {
	Send(*SubmitRunRequest) error
	CloseAndRecv() (*SubmitRunResponse, error)
	grpc.ClientStream
}

type runnerServiceSubmitRunClient struct {
	grpc.ClientStream
}

func (x *runnerServiceSubmitRunClient) Send(m *SubmitRunRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *runnerServiceSubmitRunClient) CloseAndRecv() (*SubmitRunResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SubmitRunResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunnerServiceServer is the server API for RunnerService service.
// All implementations must embed UnimplementedRunnerServiceServer
// for forward compatibility
type RunnerServiceServer interface {
	RegisterRunner(context.Context, *RegisterRunnerRequest) (*RegisterRunnerResponse, error)
	NextRun(context.Context, *NextRunRequest) (*NextRunResponse, error)
	SubmitRun(RunnerService_SubmitRunServer) error
	mustEmbedUnimplementedRunnerServiceServer()
}

// UnimplementedRunnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRunnerServiceServer struct {
}

func (UnimplementedRunnerServiceServer) RegisterRunner(context.Context, *RegisterRunnerRequest) (*RegisterRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRunner not implemented")
}
func (UnimplementedRunnerServiceServer) NextRun(context.Context, *NextRunRequest) (*NextRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextRun not implemented")
}
func (UnimplementedRunnerServiceServer) SubmitRun(RunnerService_SubmitRunServer) error {
	return status.Errorf(codes.Unimplemented, "method SubmitRun not implemented")
}
func (UnimplementedRunnerServiceServer) mustEmbedUnimplementedRunnerServiceServer() {}

// UnsafeRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerServiceServer will
// result in compilation errors.
type UnsafeRunnerServiceServer interface {
	mustEmbedUnimplementedRunnerServiceServer()
}

func RegisterRunnerServiceServer(s grpc.ServiceRegistrar, srv RunnerServiceServer) {
	s.RegisterService(&RunnerService_ServiceDesc, srv)
}

func _RunnerService_RegisterRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).RegisterRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.runner.v1.RunnerService/RegisterRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).RegisterRunner(ctx, req.(*RegisterRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_NextRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).NextRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tstr.runner.v1.RunnerService/NextRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).NextRun(ctx, req.(*NextRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_SubmitRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunnerServiceServer).SubmitRun(&runnerServiceSubmitRunServer{stream})
}

type RunnerService_SubmitRunServer interface {
	SendAndClose(*SubmitRunResponse) error
	Recv() (*SubmitRunRequest, error)
	grpc.ServerStream
}

type runnerServiceSubmitRunServer struct {
	grpc.ServerStream
}

func (x *runnerServiceSubmitRunServer) SendAndClose(m *SubmitRunResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *runnerServiceSubmitRunServer) Recv() (*SubmitRunRequest, error) {
	m := new(SubmitRunRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunnerService_ServiceDesc is the grpc.ServiceDesc for RunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tstr.runner.v1.RunnerService",
	HandlerType: (*RunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRunner",
			Handler:    _RunnerService_RegisterRunner_Handler,
		},
		{
			MethodName: "NextRun",
			Handler:    _RunnerService_NextRun_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitRun",
			Handler:       _RunnerService_SubmitRun_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "runner/v1/runner.proto",
}
