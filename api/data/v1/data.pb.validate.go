// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: data/v1/data.proto

package datav1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTestRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTestRequestMultiError,
// or nil if none found.
func (m *GetTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTestRequestMultiError(errors)
	}

	return nil
}

// GetTestRequestMultiError is an error wrapping multiple validation errors
// returned by GetTestRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestRequestMultiError) AllErrors() []error { return m }

// GetTestRequestValidationError is the validation error returned by
// GetTestRequest.Validate if the designated constraints aren't met.
type GetTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestRequestValidationError) ErrorName() string { return "GetTestRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestRequestValidationError{}

// Validate checks the field values on GetTestResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestResponseMultiError, or nil if none found.
func (m *GetTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTestResponseValidationError{
					field:  "Test",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTestResponseValidationError{
					field:  "Test",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTestResponseValidationError{
				field:  "Test",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTestResponseMultiError(errors)
	}

	return nil
}

// GetTestResponseMultiError is an error wrapping multiple validation errors
// returned by GetTestResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestResponseMultiError) AllErrors() []error { return m }

// GetTestResponseValidationError is the validation error returned by
// GetTestResponse.Validate if the designated constraints aren't met.
type GetTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestResponseValidationError) ErrorName() string { return "GetTestResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestResponseValidationError{}

// Validate checks the field values on GetTestSuiteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestSuiteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestSuiteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestSuiteRequestMultiError, or nil if none found.
func (m *GetTestSuiteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestSuiteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTestSuiteRequestMultiError(errors)
	}

	return nil
}

// GetTestSuiteRequestMultiError is an error wrapping multiple validation
// errors returned by GetTestSuiteRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTestSuiteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestSuiteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestSuiteRequestMultiError) AllErrors() []error { return m }

// GetTestSuiteRequestValidationError is the validation error returned by
// GetTestSuiteRequest.Validate if the designated constraints aren't met.
type GetTestSuiteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestSuiteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestSuiteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestSuiteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestSuiteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestSuiteRequestValidationError) ErrorName() string {
	return "GetTestSuiteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestSuiteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestSuiteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestSuiteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestSuiteRequestValidationError{}

// Validate checks the field values on GetTestSuiteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestSuiteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestSuiteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestSuiteResponseMultiError, or nil if none found.
func (m *GetTestSuiteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestSuiteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestSuite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTestSuiteResponseValidationError{
					field:  "TestSuite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTestSuiteResponseValidationError{
					field:  "TestSuite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestSuite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTestSuiteResponseValidationError{
				field:  "TestSuite",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTestSuiteResponseMultiError(errors)
	}

	return nil
}

// GetTestSuiteResponseMultiError is an error wrapping multiple validation
// errors returned by GetTestSuiteResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTestSuiteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestSuiteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestSuiteResponseMultiError) AllErrors() []error { return m }

// GetTestSuiteResponseValidationError is the validation error returned by
// GetTestSuiteResponse.Validate if the designated constraints aren't met.
type GetTestSuiteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestSuiteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestSuiteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestSuiteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestSuiteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestSuiteResponseValidationError) ErrorName() string {
	return "GetTestSuiteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestSuiteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestSuiteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestSuiteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestSuiteResponseValidationError{}

// Validate checks the field values on GetRunRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRunRequestMultiError, or
// nil if none found.
func (m *GetRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRunRequestMultiError(errors)
	}

	return nil
}

// GetRunRequestMultiError is an error wrapping multiple validation errors
// returned by GetRunRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunRequestMultiError) AllErrors() []error { return m }

// GetRunRequestValidationError is the validation error returned by
// GetRunRequest.Validate if the designated constraints aren't met.
type GetRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunRequestValidationError) ErrorName() string { return "GetRunRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunRequestValidationError{}

// Validate checks the field values on GetRunResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRunResponseMultiError,
// or nil if none found.
func (m *GetRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponseValidationError{
				field:  "Run",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRunResponseMultiError(errors)
	}

	return nil
}

// GetRunResponseMultiError is an error wrapping multiple validation errors
// returned by GetRunResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunResponseMultiError) AllErrors() []error { return m }

// GetRunResponseValidationError is the validation error returned by
// GetRunResponse.Validate if the designated constraints aren't met.
type GetRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunResponseValidationError) ErrorName() string { return "GetRunResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunResponseValidationError{}

// Validate checks the field values on GetRunnerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRunnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRunnerRequestMultiError, or nil if none found.
func (m *GetRunnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRunnerRequestMultiError(errors)
	}

	return nil
}

// GetRunnerRequestMultiError is an error wrapping multiple validation errors
// returned by GetRunnerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRunnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunnerRequestMultiError) AllErrors() []error { return m }

// GetRunnerRequestValidationError is the validation error returned by
// GetRunnerRequest.Validate if the designated constraints aren't met.
type GetRunnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunnerRequestValidationError) ErrorName() string { return "GetRunnerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRunnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunnerRequestValidationError{}

// Validate checks the field values on GetRunnerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRunnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRunnerResponseMultiError, or nil if none found.
func (m *GetRunnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunnerResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunnerResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunnerResponseValidationError{
				field:  "Runner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRunnerResponseMultiError(errors)
	}

	return nil
}

// GetRunnerResponseMultiError is an error wrapping multiple validation errors
// returned by GetRunnerResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRunnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunnerResponseMultiError) AllErrors() []error { return m }

// GetRunnerResponseValidationError is the validation error returned by
// GetRunnerResponse.Validate if the designated constraints aren't met.
type GetRunnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunnerResponseValidationError) ErrorName() string {
	return "GetRunnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRunnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunnerResponseValidationError{}
