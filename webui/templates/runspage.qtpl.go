// Code generated by qtc from "runspage.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line templates/runspage.qtpl:1
package templates

//line templates/runspage.qtpl:1
import "time"

//line templates/runspage.qtpl:2
import "fmt"

//line templates/runspage.qtpl:3
import "github.com/nanzhong/tstr/api/common/v1"

//line templates/runspage.qtpl:4
import timestamppb "google.golang.org/protobuf/types/known/timestamppb"

//line templates/runspage.qtpl:6
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line templates/runspage.qtpl:6
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line templates/runspage.qtpl:7
type RunsPage struct {
	Runs            []common.Run
	HasPendingRuns  bool
	HasFinishedRuns bool
}

//line templates/runspage.qtpl:14
func (p *RunsPage) StreamTitle(qw422016 *qt422016.Writer) {
//line templates/runspage.qtpl:14
	qw422016.N().S(`
Tester
`)
//line templates/runspage.qtpl:16
}

//line templates/runspage.qtpl:16
func (p *RunsPage) WriteTitle(qq422016 qtio422016.Writer) {
//line templates/runspage.qtpl:16
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/runspage.qtpl:16
	p.StreamTitle(qw422016)
//line templates/runspage.qtpl:16
	qt422016.ReleaseWriter(qw422016)
//line templates/runspage.qtpl:16
}

//line templates/runspage.qtpl:16
func (p *RunsPage) Title() string {
//line templates/runspage.qtpl:16
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/runspage.qtpl:16
	p.WriteTitle(qb422016)
//line templates/runspage.qtpl:16
	qs422016 := string(qb422016.B)
//line templates/runspage.qtpl:16
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/runspage.qtpl:16
	return qs422016
//line templates/runspage.qtpl:16
}

//line templates/runspage.qtpl:18
func streamfmtAbsTime(qw422016 *qt422016.Writer, t time.Time) {
//line templates/runspage.qtpl:18
	qw422016.N().S(`
    `)
//line templates/runspage.qtpl:19
	qw422016.E().S(t.Format("2006-01-02 15:04:05"))
//line templates/runspage.qtpl:19
	qw422016.N().S(`
`)
//line templates/runspage.qtpl:20
}

//line templates/runspage.qtpl:20
func writefmtAbsTime(qq422016 qtio422016.Writer, t time.Time) {
//line templates/runspage.qtpl:20
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/runspage.qtpl:20
	streamfmtAbsTime(qw422016, t)
//line templates/runspage.qtpl:20
	qt422016.ReleaseWriter(qw422016)
//line templates/runspage.qtpl:20
}

//line templates/runspage.qtpl:20
func fmtAbsTime(t time.Time) string {
//line templates/runspage.qtpl:20
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/runspage.qtpl:20
	writefmtAbsTime(qb422016, t)
//line templates/runspage.qtpl:20
	qs422016 := string(qb422016.B)
//line templates/runspage.qtpl:20
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/runspage.qtpl:20
	return qs422016
//line templates/runspage.qtpl:20
}

//line templates/runspage.qtpl:22
func streamfmtRelativeTime(qw422016 *qt422016.Writer, t time.Time) {
//line templates/runspage.qtpl:22
	qw422016.N().S(`
    `)
//line templates/runspage.qtpl:23
	qw422016.E().S(fmt.Sprintf("%s ago", time.Since(t).Round(time.Second).String()))
//line templates/runspage.qtpl:23
	qw422016.N().S(`
`)
//line templates/runspage.qtpl:24
}

//line templates/runspage.qtpl:24
func writefmtRelativeTime(qq422016 qtio422016.Writer, t time.Time) {
//line templates/runspage.qtpl:24
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/runspage.qtpl:24
	streamfmtRelativeTime(qw422016, t)
//line templates/runspage.qtpl:24
	qt422016.ReleaseWriter(qw422016)
//line templates/runspage.qtpl:24
}

//line templates/runspage.qtpl:24
func fmtRelativeTime(t time.Time) string {
//line templates/runspage.qtpl:24
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/runspage.qtpl:24
	writefmtRelativeTime(qb422016, t)
//line templates/runspage.qtpl:24
	qs422016 := string(qb422016.B)
//line templates/runspage.qtpl:24
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/runspage.qtpl:24
	return qs422016
//line templates/runspage.qtpl:24
}

//line templates/runspage.qtpl:26
func streamtimeCell(qw422016 *qt422016.Writer, timestamp *timestamppb.Timestamp) {
//line templates/runspage.qtpl:26
	qw422016.N().S(`
    <span data-toggle="tooltip" data-placement="top" title="`)
//line templates/runspage.qtpl:27
	qw422016.E().S(fmtAbsTime(timestamp.AsTime()))
//line templates/runspage.qtpl:27
	qw422016.N().S(`">`)
//line templates/runspage.qtpl:27
	qw422016.E().S(fmtRelativeTime(timestamp.AsTime()))
//line templates/runspage.qtpl:27
	qw422016.N().S(`</span>
`)
//line templates/runspage.qtpl:28
}

//line templates/runspage.qtpl:28
func writetimeCell(qq422016 qtio422016.Writer, timestamp *timestamppb.Timestamp) {
//line templates/runspage.qtpl:28
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/runspage.qtpl:28
	streamtimeCell(qw422016, timestamp)
//line templates/runspage.qtpl:28
	qt422016.ReleaseWriter(qw422016)
//line templates/runspage.qtpl:28
}

//line templates/runspage.qtpl:28
func timeCell(timestamp *timestamppb.Timestamp) string {
//line templates/runspage.qtpl:28
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/runspage.qtpl:28
	writetimeCell(qb422016, timestamp)
//line templates/runspage.qtpl:28
	qs422016 := string(qb422016.B)
//line templates/runspage.qtpl:28
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/runspage.qtpl:28
	return qs422016
//line templates/runspage.qtpl:28
}

//line templates/runspage.qtpl:30
func (p *RunsPage) StreamBody(qw422016 *qt422016.Writer) {
//line templates/runspage.qtpl:30
	qw422016.N().S(`
<div class="runs">
  
  <div class="row">
    <div class="col">
      <h1 class="h5">Pending Runs</h1>
      `)
//line templates/runspage.qtpl:36
	if p.HasPendingRuns {
//line templates/runspage.qtpl:36
		qw422016.N().S(`
      <table class="table table-sm">
        <thead>
          <tr>
            <th scope="col">ID</th>
            <th scope="col">Labels</th>
            <th scope="col">Args</th>
            <th scope="col">Enqueued At</th>
            <th scope="col">Started At</th>
            <th scope="col">Runner</th>
          </tr>
        </thead>
        <tbody>

        `)
//line templates/runspage.qtpl:50
		for _, run := range p.Runs {
//line templates/runspage.qtpl:50
			qw422016.N().S(`
        `)
//line templates/runspage.qtpl:51
			if run.FinishedAt == nil {
//line templates/runspage.qtpl:51
				qw422016.N().S(`
          <tr>
            <td scope="row"><a href="/runs/`)
//line templates/runspage.qtpl:53
				qw422016.E().S(run.Id)
//line templates/runspage.qtpl:53
				qw422016.N().S(`">`)
//line templates/runspage.qtpl:53
				qw422016.E().S(run.Id)
//line templates/runspage.qtpl:53
				qw422016.N().S(`<i class="fas fa-link"></i></a></td>
            <td scope="row"> <span class="badge bg-secondary">subsystem: core</span> <span class="badge bg-secondary">kind: integration</span>
            <td scope="row"> `)
//line templates/runspage.qtpl:55
				for _, arg := range run.TestRunConfig.Args {
//line templates/runspage.qtpl:55
					qw422016.N().S(` <span class="badge bg-secondary">`)
//line templates/runspage.qtpl:55
					qw422016.E().S(arg)
//line templates/runspage.qtpl:55
					qw422016.N().S(`</span> `)
//line templates/runspage.qtpl:55
				}
//line templates/runspage.qtpl:55
				qw422016.N().S(` </td>
            <td>`)
//line templates/runspage.qtpl:56
				streamtimeCell(qw422016, run.ScheduledAt)
//line templates/runspage.qtpl:56
				qw422016.N().S(`</td>
            <td>`)
//line templates/runspage.qtpl:57
				if run.StartedAt != nil {
//line templates/runspage.qtpl:57
					qw422016.N().S(` `)
//line templates/runspage.qtpl:57
					streamtimeCell(qw422016, run.StartedAt)
//line templates/runspage.qtpl:57
					qw422016.N().S(` `)
//line templates/runspage.qtpl:57
				}
//line templates/runspage.qtpl:57
				qw422016.N().S(`</td>
            <td>`)
//line templates/runspage.qtpl:58
				qw422016.E().S(run.RunnerId)
//line templates/runspage.qtpl:58
				qw422016.N().S(` </td>
          </tr>
          `)
//line templates/runspage.qtpl:60
			}
//line templates/runspage.qtpl:60
			qw422016.N().S(`
          `)
//line templates/runspage.qtpl:61
		}
//line templates/runspage.qtpl:61
		qw422016.N().S(`
        </tbody>
      </table>
      `)
//line templates/runspage.qtpl:64
	} else {
//line templates/runspage.qtpl:64
		qw422016.N().S(`
      <p>No pending runs...</p>
      `)
//line templates/runspage.qtpl:66
	}
//line templates/runspage.qtpl:66
	qw422016.N().S(`
    </div>
  </div>


  <div class="row">
    <div class="col">
      <h1 class="h5">Recently Finished Runs (Last 50)</h1>
      `)
//line templates/runspage.qtpl:74
	if p.HasFinishedRuns {
//line templates/runspage.qtpl:74
		qw422016.N().S(`
      <table class="table table-sm">
        <thead>
          <tr>
            <th scope="col">ID</th>
            <th scope="col">Labels</th>
            <th scope="col">Args</th>
            <th scope="col">Enqueued At</th>
            <th scope="col">Started At</th>
            <th scope="col">Finished At</th>
            <th scope="col">Runner</th>
          </tr>
        </thead>
        <tbody>
        `)
//line templates/runspage.qtpl:88
		for _, run := range p.Runs[:50] {
//line templates/runspage.qtpl:88
			qw422016.N().S(`
        `)
//line templates/runspage.qtpl:89
			if run.FinishedAt != nil {
//line templates/runspage.qtpl:89
				qw422016.N().S(`
          <tr>
            <td><a href="/runs/`)
//line templates/runspage.qtpl:91
				qw422016.E().S(run.Id)
//line templates/runspage.qtpl:91
				qw422016.N().S(`">`)
//line templates/runspage.qtpl:91
				qw422016.E().S(run.Id)
//line templates/runspage.qtpl:91
				qw422016.N().S(`<i class="fas fa-link"></i></a></td>
            <td> <span class="badge bg-secondary">subsystem: core</span> <span class="badge bg-secondary">kind: integration</span>
            <td> `)
//line templates/runspage.qtpl:93
				for _, arg := range run.TestRunConfig.Args {
//line templates/runspage.qtpl:93
					qw422016.N().S(` <span class="badge bg-secondary">`)
//line templates/runspage.qtpl:93
					qw422016.E().S(arg)
//line templates/runspage.qtpl:93
					qw422016.N().S(`</span> `)
//line templates/runspage.qtpl:93
				}
//line templates/runspage.qtpl:93
				qw422016.N().S(` </td>
            <td>`)
//line templates/runspage.qtpl:94
				streamtimeCell(qw422016, run.ScheduledAt)
//line templates/runspage.qtpl:94
				qw422016.N().S(`</td>
            <td>`)
//line templates/runspage.qtpl:95
				streamtimeCell(qw422016, run.StartedAt)
//line templates/runspage.qtpl:95
				qw422016.N().S(`</td>
            <td> `)
//line templates/runspage.qtpl:96
				streamtimeCell(qw422016, run.FinishedAt)
//line templates/runspage.qtpl:96
				qw422016.N().S(`</td>
            <td>`)
//line templates/runspage.qtpl:97
				qw422016.E().S(run.RunnerId)
//line templates/runspage.qtpl:97
				qw422016.N().S(` </td>
          </tr>
          `)
//line templates/runspage.qtpl:99
			}
//line templates/runspage.qtpl:99
			qw422016.N().S(`
          `)
//line templates/runspage.qtpl:100
		}
//line templates/runspage.qtpl:100
		qw422016.N().S(`
        </tbody>
      </table>
      `)
//line templates/runspage.qtpl:103
	} else {
//line templates/runspage.qtpl:103
		qw422016.N().S(`
      <p>No finished runs...</p>
      `)
//line templates/runspage.qtpl:105
	}
//line templates/runspage.qtpl:105
	qw422016.N().S(`
    </div>
  </div>
</div>
`)
//line templates/runspage.qtpl:109
}

//line templates/runspage.qtpl:109
func (p *RunsPage) WriteBody(qq422016 qtio422016.Writer) {
//line templates/runspage.qtpl:109
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/runspage.qtpl:109
	p.StreamBody(qw422016)
//line templates/runspage.qtpl:109
	qt422016.ReleaseWriter(qw422016)
//line templates/runspage.qtpl:109
}

//line templates/runspage.qtpl:109
func (p *RunsPage) Body() string {
//line templates/runspage.qtpl:109
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/runspage.qtpl:109
	p.WriteBody(qb422016)
//line templates/runspage.qtpl:109
	qs422016 := string(qb422016.B)
//line templates/runspage.qtpl:109
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/runspage.qtpl:109
	return qs422016
//line templates/runspage.qtpl:109
}
