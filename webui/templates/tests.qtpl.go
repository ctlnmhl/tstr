// Code generated by qtc from "tests.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line templates/tests.qtpl:1
package templates

//line templates/tests.qtpl:1
import "fmt"

//line templates/tests.qtpl:2
import "strings"

//line templates/tests.qtpl:3
import "github.com/nanzhong/tstr/db"

//line templates/tests.qtpl:5
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line templates/tests.qtpl:5
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line templates/tests.qtpl:6
type TestsPage struct {
	TestsByLabel     []db.UITestsByLabelsRow
	ResultsByTest    map[string][]db.RunResult
	Tests            []db.Test
	TestRunsByTestID map[string][]db.UIListRecentRunsRow
}

//line templates/tests.qtpl:14
func (p *TestsPage) StreamTitle(qw422016 *qt422016.Writer) {
//line templates/tests.qtpl:14
	qw422016.N().S(`
tstr - tests
`)
//line templates/tests.qtpl:16
}

//line templates/tests.qtpl:16
func (p *TestsPage) WriteTitle(qq422016 qtio422016.Writer) {
//line templates/tests.qtpl:16
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/tests.qtpl:16
	p.StreamTitle(qw422016)
//line templates/tests.qtpl:16
	qt422016.ReleaseWriter(qw422016)
//line templates/tests.qtpl:16
}

//line templates/tests.qtpl:16
func (p *TestsPage) Title() string {
//line templates/tests.qtpl:16
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/tests.qtpl:16
	p.WriteTitle(qb422016)
//line templates/tests.qtpl:16
	qs422016 := string(qb422016.B)
//line templates/tests.qtpl:16
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/tests.qtpl:16
	return qs422016
//line templates/tests.qtpl:16
}

//line templates/tests.qtpl:21
func streamtestRunBadge(qw422016 *qt422016.Writer, testRun db.UIListRecentRunsRow) {
//line templates/tests.qtpl:21
	qw422016.N().S(`
    <a href="/runs/`)
//line templates/tests.qtpl:22
	qw422016.E().S(testRun.ID.String())
//line templates/tests.qtpl:22
	qw422016.N().S(`">
          `)
//line templates/tests.qtpl:23
	if testRun.Result == db.RunResultPass {
//line templates/tests.qtpl:23
		qw422016.N().S(`
              <span class="badge bg-success">&nbsp;</span>
          `)
//line templates/tests.qtpl:25
	} else if testRun.Result == db.RunResultFail {
//line templates/tests.qtpl:25
		qw422016.N().S(`
              <span class="badge bg-danger">&nbsp;</span>
          `)
//line templates/tests.qtpl:27
	} else if testRun.Result == db.RunResultError {
//line templates/tests.qtpl:27
		qw422016.N().S(`
              <span class="badge bg-danger">E</span>
          `)
//line templates/tests.qtpl:29
	} else if testRun.Result == db.RunResultUnknown {
//line templates/tests.qtpl:29
		qw422016.N().S(`
              <span class="badge bg-warning">?</span>
          `)
//line templates/tests.qtpl:31
	}
//line templates/tests.qtpl:31
	qw422016.N().S(`
      </a>
`)
//line templates/tests.qtpl:33
}

//line templates/tests.qtpl:33
func writetestRunBadge(qq422016 qtio422016.Writer, testRun db.UIListRecentRunsRow) {
//line templates/tests.qtpl:33
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/tests.qtpl:33
	streamtestRunBadge(qw422016, testRun)
//line templates/tests.qtpl:33
	qt422016.ReleaseWriter(qw422016)
//line templates/tests.qtpl:33
}

//line templates/tests.qtpl:33
func testRunBadge(testRun db.UIListRecentRunsRow) string {
//line templates/tests.qtpl:33
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/tests.qtpl:33
	writetestRunBadge(qb422016, testRun)
//line templates/tests.qtpl:33
	qs422016 := string(qb422016.B)
//line templates/tests.qtpl:33
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/tests.qtpl:33
	return qs422016
//line templates/tests.qtpl:33
}

//line templates/tests.qtpl:35
func (p *TestsPage) StreamBody(qw422016 *qt422016.Writer) {
//line templates/tests.qtpl:35
	qw422016.N().S(`

<div class="tests">
`)
//line templates/tests.qtpl:38
	for _, test := range p.Tests {
//line templates/tests.qtpl:38
		qw422016.N().S(`
  <div class="row mb-2">
    <div class="col">
      <h2 class="h4"><a href="/tests/`)
//line templates/tests.qtpl:41
		qw422016.E().S(test.ID.String())
//line templates/tests.qtpl:41
		qw422016.N().S(`">`)
//line templates/tests.qtpl:41
		qw422016.E().S(test.Name)
//line templates/tests.qtpl:41
		qw422016.N().S(`</a></h2>
      `)
//line templates/tests.qtpl:42
		for _, testRun := range p.TestRunsByTestID[test.ID.String()] {
//line templates/tests.qtpl:42
			qw422016.N().S(`

      `)
//line templates/tests.qtpl:44
			streamtestRunBadge(qw422016, testRun)
//line templates/tests.qtpl:44
			qw422016.N().S(`

      `)
//line templates/tests.qtpl:46
		}
//line templates/tests.qtpl:46
		qw422016.N().S(`
    </div>
  </div>


`)
//line templates/tests.qtpl:51
	}
//line templates/tests.qtpl:51
	qw422016.N().S(`

</div>

<div class="packages">
`)
//line templates/tests.qtpl:56
	for _, byLabel := range p.TestsByLabel {
//line templates/tests.qtpl:56
		qw422016.N().S(`
`)
//line templates/tests.qtpl:59
		labelsAsString := strings.Join(labelsAsSlice(byLabel.Labels, ": "), " ")

//line templates/tests.qtpl:60
		qw422016.N().S(`
  <div class="row mb-2">
    <div class="col">
      <h2 class="h4"><a href="/labels/`)
//line templates/tests.qtpl:63
		qw422016.E().S(fmt.Sprintf("TODO"))
//line templates/tests.qtpl:63
		qw422016.N().S(`">`)
//line templates/tests.qtpl:63
		qw422016.E().S(labelsAsString)
//line templates/tests.qtpl:63
		qw422016.N().S(`</a></h2>
      `)
//line templates/tests.qtpl:64
		for _, test := range byLabel.Tests.([]string) {
//line templates/tests.qtpl:64
			qw422016.N().S(`
        `)
//line templates/tests.qtpl:65
			for _, result := range p.ResultsByTest[test] {
//line templates/tests.qtpl:65
				qw422016.N().S(`

            `)
//line templates/tests.qtpl:67
				if result == db.RunResultPass {
//line templates/tests.qtpl:67
					qw422016.N().S(`
            <span class="badge bg-success">&nbsp;</span>
            `)
//line templates/tests.qtpl:69
				} else {
//line templates/tests.qtpl:69
					qw422016.N().S(`
            <span class="badge bg-danger">&nbsp;</span>
            `)
//line templates/tests.qtpl:71
				}
//line templates/tests.qtpl:71
				qw422016.N().S(`
        `)
//line templates/tests.qtpl:72
			}
//line templates/tests.qtpl:72
			qw422016.N().S(`
      `)
//line templates/tests.qtpl:73
		}
//line templates/tests.qtpl:73
		qw422016.N().S(`
    </div>
  </div>
`)
//line templates/tests.qtpl:76
	}
//line templates/tests.qtpl:76
	qw422016.N().S(`
</div>
`)
//line templates/tests.qtpl:78
}

//line templates/tests.qtpl:78
func (p *TestsPage) WriteBody(qq422016 qtio422016.Writer) {
//line templates/tests.qtpl:78
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/tests.qtpl:78
	p.StreamBody(qw422016)
//line templates/tests.qtpl:78
	qt422016.ReleaseWriter(qw422016)
//line templates/tests.qtpl:78
}

//line templates/tests.qtpl:78
func (p *TestsPage) Body() string {
//line templates/tests.qtpl:78
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/tests.qtpl:78
	p.WriteBody(qb422016)
//line templates/tests.qtpl:78
	qs422016 := string(qb422016.B)
//line templates/tests.qtpl:78
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/tests.qtpl:78
	return qs422016
//line templates/tests.qtpl:78
}
